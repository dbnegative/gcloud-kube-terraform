- name: Create kubernetes dir
  become: true
  file: path=/var/lib/kubernetes state=directory
  tags:
    - kube-controller

- name: Copy SSL certs into dircetory   
  become: true
  shell: "cp /ssl/*.pem /var/lib/kubernetes/."
  tags:
    - kube-controller

- name: Download kube-controller-manager binary
  become: true
  get_url: 
    url: https://storage.googleapis.com/kubernetes-release/release/v1.3.0/bin/linux/amd64/kube-controller-manager 
    dest: /usr/bin/kube-controller-manager 
    mode: 0755
  tags:
    - kube-controller

- name: Get internal ip
  uri: 
   url: http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip 
   HEADER_Metadata-Flavor: Google 
   method: GET
   return_content: yes
  register: internal_ip
  tags:
    - kube-controller

- name: Copy over kube-controller-manager.service
  become: true
  template: src=../files/kube-controller-manager.service.j2 dest=/etc/systemd/system/kube-controller-manager.service 
  notify: 
   - restart kube-controller-manager.service
  tags:
    - kube-controller

- stat: path=/etc/systemd/system/kube-controller-manager.service
  register: kcm
  tags:
    - kube-controller

- name: Reload daemon
  become: true
  shell: "systemctl daemon-reload"
  when: kcm.stat.exists == false
  tags:
    - kube-controller 

- name: Enable kube-controller-manager service
  become: true
  shell: "systemctl enable kube-controller-manager"
  run_once: true
  tags:
    - kube-controller

- name: Start kube-controller-manager
  become: true
  service: name=kube-controller-manager state=started
  tags:
    - kube-controller
  
- name: Check Status
  become: true
  ignore_errors: yes
  shell: "systemctl status kube-controller-manager --no-pager"
  register: kubectrl_status
  tags:
    - debug

- name: Cluster - kube controller status
  ignore_errors: yes
  debug: msg={{ kubectrl_status.stdout_lines }}
  tags:
    - debug